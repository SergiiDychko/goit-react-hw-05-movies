{"version":3,"file":"static/js/355.70942b5a.chunk.js","mappings":"sNAEaA,EAAgBC,EAAAA,GAAAA,GAAS,+G,2BCAzBC,EAAeD,EAAAA,GAAAA,GAAS,0X,SCEtB,SAASE,EAAW,GAA4B,IAA1BC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAASC,EAAI,EAAJA,KAC1CC,EAAwCH,EAAxCG,YAAaC,EAA2BJ,EAA3BI,KAAMC,EAAqBL,EAArBK,SAAUC,EAAWN,EAAXM,OAC/BC,EAAsB,KAATH,EAAcA,EAAOC,EACpCG,GAAUL,GAAeA,EAAYM,SAAS,O,spSALtC,sCAOAN,EACZ,OACE,UAACL,EAAY,YACX,iBAAKY,UAAU,WAAU,WACvB,gBACEA,UAAU,SACVC,IAAKH,EACLI,IAAKL,EACLM,MAAM,KACNC,OAAO,QAET,iBAAKJ,UAAU,WAAU,WACvB,eAAIA,UAAU,WAAU,SAAEH,KAC1B,eAAGG,UAAU,SAAQ,qBAAUJ,YAGnC,cAAGI,UAAU,aAAY,SAAET,KAC3B,eAAGS,UAAU,aAAY,qBACbR,EAAKa,MAAM,EAAG,IAAM,IAAMb,EAAKa,MAAM,GAAI,SAI7D,C,aCxBe,SAASC,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,IAAG,eAAnCC,EAAO,KAAEC,EAAU,KAC1B,GAA8BF,EAAAA,EAAAA,WAAS,GAAM,eAAtCG,EAAO,KAAEC,EAAU,KAElBC,GAAYC,EAAAA,EAAAA,MAAZD,QAUR,OARAE,EAAAA,EAAAA,YAAU,WACRH,GAAW,IACXI,EAAAA,EAAAA,IAAaH,GACVI,MAAK,SAAAC,GAAQ,OAAIR,EAAWQ,EAASC,KAAKC,QAAQ,IAClDC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,uBAAuB,IAClDC,SAAQ,kBAAMb,GAAW,EAAM,GACpC,GAAG,CAACC,KAGF,gCACGF,IAAW,SAACe,EAAA,EAAM,KACnB,UAACvC,EAAa,WACQ,IAAnBsB,EAAQkB,QACPlB,EAAQmB,KAAI,gBAAGC,EAAc,EAAdA,eAAgBrC,EAAO,EAAPA,QAASsC,EAAU,EAAVA,WAAYC,EAAE,EAAFA,GAAE,OACpD,SAACzC,EAAU,CAETC,OAAQsC,EACRrC,QAASA,EACTC,KAAMqC,GAHDC,EAIL,KAEJpB,GAA8B,IAAnBF,EAAQkB,SAAgB,yBACjC,cAAG1B,UAAU,SAAQ,8DAMjC,C,qLCtCM+B,EAAS,mCAEFC,EAAa,yCAAG,yGACJC,EAAAA,EAAAA,IAChB,yDAAD,OAA0DF,IAAS,OAD3D,OAARG,EAAQ,yBAGPA,GAAQ,2CAChB,kBALyB,mCAObC,EAAU,yCAAG,WAAOC,GAAK,4FACbH,EAAAA,EAAAA,IAAU,mDAAD,OACqBG,EAAK,oBAAYL,IACpE,KAAD,EAFa,OAARd,EAAQ,yBAGPA,GAAQ,2CAChB,gBALsB,sCAOVoB,EAAU,yCAAG,WAAOP,GAAE,4FACVG,EAAAA,EAAAA,IAAU,sCAAD,OACQH,EAAE,oBAAYC,IACpD,KAAD,EAFa,OAARd,EAAQ,yBAGPA,GAAQ,2CAChB,gBALsB,sCAOVqB,EAAS,yCAAG,WAAOR,GAAE,4FACTG,EAAAA,EAAAA,IAAU,sCAAD,OACQH,EAAE,4BAAoBC,IAC5D,KAAD,EAFa,OAARd,EAAQ,yBAGPA,GAAQ,2CAChB,gBALqB,sCAOTF,EAAY,yCAAG,WAAMe,GAAE,4FACXG,EAAAA,EAAAA,IAAU,sCAAD,OACQH,EAAE,4BAAoBC,IAC5D,KAAD,EAFa,OAARd,EAAQ,yBAGPA,GAAQ,2CAChB,gBALwB,qC","sources":["components/Reviews/Reviews.styles.js","components/Reviews/ReviewItem/ReviewItem.styled.js","components/Reviews/ReviewItem/ReviewItem.jsx","components/Reviews/Reviews.jsx","utils/fetchApi.jsx"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const StyledReviews = styled.ul`\r\n  margin-bottom: 20px;\r\n  .notify {\r\n    font-size: 18px;\r\n    font-weight: 500;\r\n  }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledReview = styled.li`\r\n  margin-bottom: 30px;\r\n  padding: 10px;\r\n  border: 2px solid darkslategray;\r\n  border-radius: 0 20px 20px 20px;\r\n  :nth-child(even) {\r\n    border: 2px solid greenyellow;\r\n  }\r\n\r\n  .userWrap {\r\n    display: flex;\r\n    gap: 10px;\r\n    margin-bottom: 10px;\r\n  }\r\n  .reviewText {\r\n    margin-bottom: 10px;\r\n  }\r\n  .reviewDate {\r\n    font-weight: 500;\r\n  }\r\n`;","import { StyledReview } from './ReviewItem.styled';\r\nimport defaultAvatar from '../../../images/UserDefaultAvatar.jpg';\r\nconst baseURL = 'https://image.tmdb.org/t/p/original';\r\n\r\nexport default function ReviewItem({ author, content, date }) {\r\n    const { avatar_path, name, username, rating } = author;\r\n    const authorName = name !== '' ? name : username;\r\n  const avatar = !avatar_path || avatar_path.includes('www')\r\n    ? defaultAvatar\r\n    : baseURL + avatar_path;\r\n    return (\r\n      <StyledReview>\r\n        <div className=\"userWrap\">\r\n          <img\r\n            className=\"avatar\"\r\n            src={avatar}\r\n            alt={authorName}\r\n            width=\"50\"\r\n            height=\"50\"\r\n          />\r\n          <div className=\"userInfo\">\r\n            <h3 className=\"username\">{authorName}</h3>\r\n            <p className=\"rating\">Rating: {rating}</p>\r\n          </div>\r\n        </div>\r\n        <p className=\"reviewText\">{content}</p>\r\n        <p className=\"reviewDate\">\r\n          Posted: {(date.slice(0, 10) + ' ' + date.slice(11, 19))}\r\n        </p>\r\n      </StyledReview>\r\n    );\r\n}\r\n","import { StyledReviews } from './Reviews.styles';\r\nimport { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { fetchReviews } from '../../utils/fetchApi';\r\nimport ReviewItem from './ReviewItem';\r\nimport Loader from '../Loader';\r\n\r\nexport default function Reviews() {\r\n  const [reviews, setReviews] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const { movieId } = useParams();\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    fetchReviews(movieId)\r\n      .then(response => setReviews(response.data.results))\r\n      .catch(error => console.log('Something went wrong'))\r\n      .finally(() => setLoading(false));\r\n  }, [movieId]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <Loader />}\r\n      <StyledReviews>\r\n        {reviews.length !== 0 &&\r\n          reviews.map(({ author_details, content, created_at, id }) =>\r\n            <ReviewItem\r\n              key={id}\r\n              author={author_details}\r\n              content={content}\r\n              date={created_at}\r\n            />\r\n          )}\r\n        {!loading && reviews.length === 0 && <li>\r\n            <p className=\"notify\">We don't have any reviews for this movie.</p>\r\n          </li>\r\n        }\r\n      </StyledReviews>\r\n    </>\r\n  );\r\n}\r\n","// import PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\n\r\nconst apiKey = 'e47912c9c86a85e39c0250f9b01ed0f5';\r\n\r\nexport const fetchTrending = async () => {\r\n  const trending = await axios\r\n    .get(`https://api.themoviedb.org/3/trending/all/day?api_key=${apiKey}`)\r\n\r\n  return trending;\r\n};\r\n\r\nexport const fetchQuery = async (query) => {\r\n  const response = await axios.get(\r\n    `https://api.themoviedb.org/3/search/movie?query=${query}&api_key=${apiKey}`\r\n  );\r\n  return response;\r\n};\r\n\r\nexport const fetchMovie = async (id) => {\r\n  const response = await axios.get(\r\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${apiKey}`\r\n  );\r\n  return response;\r\n};\r\n\r\nexport const fetchCast = async (id) => {\r\n  const response = await axios.get(\r\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${apiKey}`\r\n  );\r\n  return response;\r\n};\r\n\r\nexport const fetchReviews = async id => {\r\n  const response = await axios.get(\r\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${apiKey}`\r\n  );\r\n  return response;\r\n};"],"names":["StyledReviews","styled","StyledReview","ReviewItem","author","content","date","avatar_path","name","username","rating","authorName","avatar","includes","className","src","alt","width","height","slice","Reviews","useState","reviews","setReviews","loading","setLoading","movieId","useParams","useEffect","fetchReviews","then","response","data","results","catch","error","console","log","finally","Loader","length","map","author_details","created_at","id","apiKey","fetchTrending","axios","trending","fetchQuery","query","fetchMovie","fetchCast"],"sourceRoot":""}